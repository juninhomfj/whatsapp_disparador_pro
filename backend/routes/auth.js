const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const User = require('../models/User');
require('dotenv').config();

// Middleware de autentica칞칚o JWT
function authMiddleware(req, res, next) {
    const authHeader = req.headers.authorization;
    if (!authHeader) return res.status(401).json({ error: 'Token n칚o fornecido' });

    const [, token] = authHeader.split(' ');
    if (!token) return res.status(401).json({ error: 'Token mal formatado' });

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.userId = decoded.userId;
        next();
    } catch (err) {
        return res.status(401).json({ error: 'Token inv치lido' });
    }
}

// 游댏 Login
router.post('/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        console.log('Tentando login:', email, password);

        const user = await User.findOne({ email });
        console.log('Usu치rio encontrado:', user);

        if (!user) {
            console.log('Usu치rio n칚o encontrado');
            return res.status(401).json({ error: 'Credenciais inv치lidas' });
        }

        const validPassword = await bcrypt.compare(password, user.password);
        console.log('Senha v치lida?', validPassword);

        if (!validPassword) {
            console.log('Senha inv치lida');
            return res.status(401).json({ error: 'Credenciais inv치lidas' });
        }

        const token = jwt.sign(
            { userId: user._id },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );

        res.json({ token });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Erro interno do servidor' });
    }
});

// 游닇 Registro
router.post('/register', async (req, res) => {
    try {
        const { email, password } = req.body;
        if (!email || !password) return res.status(400).json({ error: 'E-mail e senha obrigat칩rios' });

        const existingUser = await User.findOne({ email });
        if (existingUser) return res.status(400).json({ error: 'Usu치rio j치 existe' });

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ email, password: hashedPassword });
        await newUser.save();

        res.status(201).json({ message: 'Usu치rio criado com sucesso' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Erro ao criar usu치rio' });
    }
});

// 游댐 Esqueci a Senha
router.post('/forgot-password', async (req, res) => {
    try {
        const { email } = req.body;
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(200).json({ message: 'Se o e-mail estiver cadastrado, voc칡 receber치 um link.' });
        }

        const token = crypto.randomBytes(32).toString('hex');
        user.resetToken = token;
        user.resetTokenExpires = Date.now() + 3600000; // 1 hora
        await user.save();

        // Em produ칞칚o: enviar e-mail!
        const resetLink = `http://localhost:3000/reset-password.html?token=${token}`;
        console.log("Link de redefini칞칚o (DEV):", resetLink);

        return res.status(200).json({ message: 'Link de redefini칞칚o enviado para o e-mail' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Erro ao processar' });
    }
});

// 游댃 Redefinir Senha
router.post('/reset-password', async (req, res) => {
    try {
        const { token, password } = req.body;
        const user = await User.findOne({
            resetToken: token,
            resetTokenExpires: { $gt: Date.now() }
        });

        if (!user) return res.status(400).json({ error: 'Token inv치lido ou expirado' });

        const hashedPassword = await bcrypt.hash(password, 10);
        user.password = hashedPassword;
        user.resetToken = undefined;
        user.resetTokenExpires = undefined;
        await user.save();

        res.status(200).json({ message: 'Senha redefinida com sucesso' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Erro ao redefinir senha' });
    }
});

// 游댍 Rota para obter dados do usu치rio autenticado
router.get('/me', authMiddleware, async (req, res) => {
    try {
        const user = await User.findById(req.userId).select('-password -resetToken -resetTokenExpires');
        if (!user) return res.status(404).json({ error: 'Usu치rio n칚o encontrado' });
        res.json(user);
    } catch (err) {
        res.status(500).json({ error: 'Erro ao buscar usu치rio' });
    }
});

module.exports = router;